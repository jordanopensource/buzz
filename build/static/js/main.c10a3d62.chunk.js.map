{"version":3,"sources":["lib/store.js","lib/endpoints.js","components/Header.js","components/Footer.js","containers/Lobby.js","components/Table.js","containers/Game.js","App.js","serviceWorker.js","index.js"],"names":["Buzzer","name","minPlayers","maxPlayers","setup","queue","locked","phases","play","start","moves","buzz","G","ctx","id","newQueue","timestamp","Date","getTime","resetBuzzer","resetBuzzers","toggleLock","turn","activePlayers","ActivePlayers","ALL","axios","defaults","headers","hostname","window","location","port","protocol","gameport","process","PORT","url","LOBBY_SERVER","GAME_SERVER","getRoom","roomId","a","cleanRoomId","toUpperCase","get","response","status","createRoom","post","numPlayers","joinRoom","roomID","playerID","playerName","leaveRoom","credentials","Logo","size","width","height","viewBox","fill","xmlns","cx","cy","r","Header","auth","clearAuth","sound","setSound","history","useHistory","push","console","log","Navbar","Brand","className","isNil","onClick","leave","FooterSimple","target","rel","href","Footer","mobileOnly","Container","ERROR_TYPE","ERROR_MESSAGE","Lobby","setAuth","useLocation","prefilledRoomID","useState","setName","room","setRoom","joinMode","setJoinMode","error","setError","loading","setLoading","enterRoom","roomRes","Error","data","playerSeat","players","find","player","freeSeat","connected","joinRes","creds","playerCredentials","message","createRes","gameID","handleSubmit","event","preventDefault","trim","length","makeRoom","form","Form","onSubmit","e","Group","controlId","Label","Control","value","autoComplete","autoCorrect","autoCapitalize","spellCheck","onChange","type","disabled","touts","Table","game","loaded","setLoaded","some","o","buzzed","setBuzzer","lastBuzz","setLastBuzz","soundPlayed","setSoundPlayed","buzzButton","useRef","queueRef","buzzSound","Howl","src","volume","rate","playSound","useEffect","now","setTimeout","current","isEmpty","onKeydown","keyCode","repeat","click","addEventListener","removeEventListener","gameMetadata","filter","p","map","String","firstPlayer","sortBy","parseInt","isHost","values","buzzedPlayers","orderBy","q","headerData","isConnected","ref","i","delta","key","round","Game","useParams","App","Client","board","multiplayer","SocketIO","server","debug","Spinner","animation","role","path","render","match","to","pathname","state","from","Boolean","ReactDOM","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch"],"mappings":"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","file":"static/js/main.c10a3d62.chunk.js","sourcesContent":["import { ActivePlayers } from 'boardgame.io/core';\n\nfunction resetBuzzers(G) {\n  G.queue = {};\n}\n\nfunction resetBuzzer(G, ctx, id) {\n  const newQueue = { ...G.queue };\n  delete newQueue[id];\n  G.queue = newQueue;\n}\n\nfunction toggleLock(G) {\n  G.locked = !G.locked;\n}\n\nfunction buzz(G, ctx, id) {\n  const newQueue = {\n    ...G.queue,\n  };\n  if (!newQueue[id]) {\n    // buzz on server will overwrite the client provided timestamp\n    newQueue[id] = { id, timestamp: new Date().getTime() };\n  }\n  G.queue = newQueue;\n}\n\nexport const Buzzer = {\n  name: 'buzzer',\n  minPlayers: 2,\n  maxPlayers: 200,\n  setup: () => ({ queue: {}, locked: false }),\n  phases: {\n    play: {\n      start: true,\n      moves: { buzz, resetBuzzer, resetBuzzers, toggleLock },\n      turn: {\n        activePlayers: ActivePlayers.ALL,\n      },\n    },\n  },\n};\n","import axios from 'axios';\nimport { Buzzer } from '../lib/store';\n\naxios.defaults.headers['Content-Type'] = 'application/json';\naxios.defaults.headers['Accept'] = 'application/json';\n\nconst hostname = window.location.hostname;\nconst port = window.location.port;\nconst protocol = window.location.protocol;\nconst gameport = process.env.PORT || 4001;\nconst url = protocol + '//' + hostname + (port ? ':' + port : '');\nconst localUrl = `${protocol}//${hostname}:${gameport}`;\n\nconst LOBBY_SERVER = process.env.NODE_ENV === 'production' ? url : localUrl;\nexport const GAME_SERVER =\n  process.env.NODE_ENV === 'production' ? url : localUrl;\n\nexport async function getRoom(roomId) {\n  // convert to uppercase\n  const cleanRoomId = roomId.toUpperCase();\n  try {\n    const response = await axios.get(\n      `${LOBBY_SERVER}/games/${Buzzer.name}/${cleanRoomId}`\n    );\n    return response;\n  } catch (error) {\n    if (error.response) {\n      return error.response;\n    } else {\n      return { status: 500 };\n    }\n  }\n}\n\nexport async function createRoom() {\n  try {\n    const response = axios.post(`${LOBBY_SERVER}/games/${Buzzer.name}/create`, {\n      numPlayers: 200,\n    });\n    return response;\n  } catch (error) {\n    if (error.response) {\n      return error.response;\n    } else {\n      return { status: 500 };\n    }\n  }\n}\n\nexport async function joinRoom(roomID, playerID, playerName) {\n  try {\n    const response = axios.post(\n      `${LOBBY_SERVER}/games/${Buzzer.name}/${roomID}/join`,\n      {\n        playerID,\n        playerName,\n      }\n    );\n    return response;\n  } catch (error) {\n    if (error.response) {\n      return error.response;\n    } else {\n      return { status: 500 };\n    }\n  }\n}\n\nexport async function leaveRoom(roomID, playerID, credentials) {\n  try {\n    const response = axios.post(\n      `${LOBBY_SERVER}/games/${Buzzer.name}/${roomID}/leave`,\n      {\n        playerID,\n        credentials,\n      }\n    );\n    return response;\n  } catch (error) {\n    if (error.response) {\n      return error.response;\n    } else {\n      return { status: 500 };\n    }\n  }\n}\n","import React from 'react';\nimport { Navbar } from 'react-bootstrap';\nimport { isNil } from 'lodash';\nimport { useHistory } from 'react-router';\nimport { leaveRoom } from '../lib/endpoints';\n\nfunction Logo({ size = 25 }) {\n  return (\n    <svg\n      width={size}\n      height={size}\n      viewBox=\"0 0 95 95\"\n      fill=\"none\"\n      xmlns=\"http://www.w3.org/2000/svg\"\n    >\n      <circle cx=\"20\" cy=\"20\" r=\"20\" fill=\"#F2994A\" />\n      <circle cx=\"75\" cy=\"20\" r=\"20\" fill=\"#348DF5\" />\n      <circle cx=\"20\" cy=\"75\" r=\"20\" fill=\"#348DF5\" />\n      <circle cx=\"75\" cy=\"75\" r=\"20\" fill=\"#348DF5\" />\n    </svg>\n  );\n}\n\nexport default function Header({\n  auth = {},\n  clearAuth,\n  sound = null,\n  setSound,\n}) {\n  const history = useHistory();\n\n  // leave current game\n  async function leave() {\n    try {\n      await leaveRoom(auth.roomID, auth.playerID, auth.credentials);\n      clearAuth();\n      history.push('/');\n    } catch (error) {\n      console.log('leave error', error);\n      clearAuth();\n      history.push('/');\n    }\n  }\n\n  return (\n    <header>\n      <Navbar>\n        <Navbar.Brand>\n          <Logo /> Multibuzzer\n        </Navbar.Brand>\n        <div className=\"nav-buttons\">\n          {!isNil(sound) ? (\n            <button className=\"text-button\" onClick={() => setSound()}>\n              {sound ? 'Turn off sound' : 'Turn on sound'}\n            </button>\n          ) : null}\n          {clearAuth ? (\n            <button className=\"text-button\" onClick={() => leave()}>\n              Leave game\n            </button>\n          ) : null}\n        </div>\n      </Navbar>\n    </header>\n  );\n}\n","import React from 'react';\nimport { Container } from 'react-bootstrap';\n\nexport function FooterSimple() {\n  return (\n    <div id=\"footer-simple\">\n      Built on{' '}\n      <a\n        target=\"_blank\"\n        rel=\"noopener noreferrer\"\n        href=\"https://github.com/wsun/multibuzzer\"\n      >\n        open source\n      </a>\n    </div>\n  );\n}\n\n/**\n * Footer component\n * @param {bool} mobileOnly - only display on mobile devices, <768 px\n */\nexport default function Footer({ mobileOnly = false }) {\n  return (\n    <footer className={mobileOnly ? 'd-block d-md-none' : null}>\n      <Container>\n        <div>\n          Built on{' '}\n          <a\n            target=\"_blank\"\n            rel=\"noopener noreferrer\"\n            href=\"https://github.com/wsun/multibuzzer\"\n          >\n            open source\n          </a>\n        </div>\n      </Container>\n    </footer>\n  );\n}\n","import React, { useState } from 'react';\nimport { Container, Form } from 'react-bootstrap';\nimport { useLocation, useHistory } from 'react-router-dom';\nimport { get } from 'lodash';\nimport { joinRoom, getRoom, createRoom } from '../lib/endpoints';\nimport Header from '../components/Header';\nimport Footer, { FooterSimple } from '../components/Footer';\n\nconst ERROR_TYPE = {\n  emptyCode: 'emptyCode',\n  roomCode: 'roomCode',\n  name: 'name',\n  hostRoom: 'hostRoom',\n  fullRoom: 'fullRoom',\n  dupName: 'dupName',\n};\n\nconst ERROR_MESSAGE = {\n  [ERROR_TYPE.emptyCode]: 'Please enter a room code',\n  [ERROR_TYPE.roomCode]: 'Unable to join room with this code',\n  [ERROR_TYPE.name]: 'Please enter your player name',\n  [ERROR_TYPE.dupName]: 'Player name already taken',\n  [ERROR_TYPE.hostRoom]: 'Unable to create room, please try again',\n  [ERROR_TYPE.fullRoom]: 'Room has reached capacity',\n};\n\nexport default function Lobby({ setAuth }) {\n  const location = useLocation();\n  const prefilledRoomID = get(location, 'state.roomID');\n\n  const history = useHistory();\n  const [name, setName] = useState('');\n  const [room, setRoom] = useState(prefilledRoomID || '');\n  const [joinMode, setJoinMode] = useState(true);\n  const [error, setError] = useState('');\n  const [loading, setLoading] = useState(false);\n\n  // enter room: find room, then join it\n  async function enterRoom(roomId, hosting = false) {\n    if (!hosting) {\n      setLoading(true);\n    }\n\n    try {\n      // get room\n      const roomRes = await getRoom(roomId);\n      if (roomRes.status !== 200) {\n        throw new Error(ERROR_TYPE.roomCode);\n      }\n      const room = roomRes.data;\n\n      // determine seat to take\n      const playerSeat = room.players.find((player) => player.name === name);\n      const freeSeat = room.players.find((player) => !player.name);\n\n      if (playerSeat && playerSeat.connected) {\n        throw new Error(ERROR_TYPE.dupName);\n      }\n      if (!playerSeat && !freeSeat) {\n        throw new Error(ERROR_TYPE.fullRoom);\n      }\n      const playerID = get(playerSeat, 'id', get(freeSeat, 'id'));\n      const joinRes = await joinRoom(room.roomID, playerID, name);\n      if (joinRes.status !== 200) {\n        throw new Error(ERROR_TYPE.roomCode);\n      }\n      const creds = joinRes.data;\n      const auth = {\n        playerID,\n        credentials: creds.playerCredentials,\n        roomID: room.roomID,\n      };\n\n      // save auth and go to room\n      setAuth(auth);\n      setLoading(false);\n      history.push(`/${room.roomID}`);\n    } catch (error) {\n      setLoading(false);\n      setError(ERROR_MESSAGE[error.message]);\n    }\n  }\n\n  // make room: create room, then join it\n  async function makeRoom() {\n    setLoading(true);\n    try {\n      const createRes = await createRoom();\n      if (createRes.status !== 200) {\n        throw new Error(ERROR_TYPE.hostRoom);\n      }\n      const roomID = createRes.data.gameID;\n      await enterRoom(roomID, true);\n    } catch (error) {\n      setLoading(false);\n      setError(ERROR_MESSAGE[error.message]);\n    }\n  }\n\n  function handleSubmit(event) {\n    event.preventDefault();\n\n    // validate room and/or player name has been filled\n    if (joinMode) {\n      if (room.trim().length === 0) {\n        setError(ERROR_MESSAGE[ERROR_TYPE.emptyCode]);\n      } else if (name.trim().length === 0) {\n        setError(ERROR_MESSAGE[ERROR_TYPE.name]);\n      } else if (room.trim().length !== 6) {\n        setError(ERROR_MESSAGE[ERROR_TYPE.roomCode]);\n      } else {\n        enterRoom(room);\n      }\n    } else {\n      if (name.trim().length === 0) {\n        setError(ERROR_MESSAGE[ERROR_TYPE.name]);\n      } else {\n        makeRoom();\n      }\n    }\n  }\n\n  const form = joinMode ? (\n    <Form className=\"lobby-form\" onSubmit={(e) => handleSubmit(e)}>\n      <h3>Join a game</h3>\n      <Form.Group controlId=\"room\">\n        <Form.Label>Room code</Form.Label>\n        <Form.Control\n          value={room}\n          autoComplete=\"off\"\n          autoCorrect=\"off\"\n          autoCapitalize=\"characters\"\n          spellCheck=\"false\"\n          onChange={(e) => {\n            setError('');\n            setRoom(e.target.value);\n          }}\n        />\n      </Form.Group>\n\n      <Form.Group controlId=\"name\">\n        <Form.Label>Your name</Form.Label>\n        <Form.Control\n          value={name}\n          onChange={(e) => {\n            setError('');\n            setName(e.target.value);\n          }}\n        />\n      </Form.Group>\n\n      <div className=\"error-message\">{error}</div>\n      <button type=\"submit\" disabled={loading}>\n        {loading ? 'Joining...' : 'Join'}\n      </button>\n      <div className=\"switcher\">\n        Hosting a game?{' '}\n        <button\n          className=\"inline\"\n          onClick={() => {\n            setError('');\n            setJoinMode(false);\n          }}\n        >\n          Create room\n        </button>\n      </div>\n    </Form>\n  ) : (\n    <Form className=\"lobby-form\" onSubmit={(e) => handleSubmit(e)}>\n      <h3>Host a game</h3>\n      <Form.Group controlId=\"name\">\n        <Form.Label>Your name</Form.Label>\n        <Form.Control\n          value={name}\n          onChange={(e) => {\n            setError('');\n            setName(e.target.value);\n          }}\n        />\n      </Form.Group>\n\n      <div className=\"error-message\">{error}</div>\n      <button type=\"submit\" disabled={loading}>\n        {loading ? 'Creating...' : 'Host'}\n      </button>\n      <div className=\"switcher\">\n        Joining a game?{' '}\n        <button\n          className=\"inline\"\n          onClick={() => {\n            setError('');\n            setJoinMode(true);\n          }}\n        >\n          Enter room\n        </button>\n      </div>\n    </Form>\n  );\n\n  const touts = (\n    <div className=\"touts\">\n      <div>\n        <h4>Simple multiplayer buzzer system</h4>\n        <p>Host a room and invite up to 200 people to join</p>\n      </div>\n      <div>\n        <h4>Join on any device</h4>\n        <p>\n          Use your computer, smartphone, or tablet to join and start buzzing\n        </p>\n      </div>\n      <div>\n        <h4>Free to use</h4>\n        <p>\n          Perfect for online quiz bowl, trivia night, or a classroom activity\n        </p>\n      </div>\n    </div>\n  );\n\n  return (\n    <main id=\"lobby\">\n      <section className=\"primary d-none d-md-flex\">\n        <div id=\"lobby-left\">\n          <div>\n            <Header />\n            <section className=\"container-half\">{touts}</section>\n          </div>\n          <section className=\"container-half\">\n            <FooterSimple />\n          </section>\n        </div>\n        <div id=\"lobby-right\">\n          <section className=\"container-half\">{form}</section>\n        </div>\n      </section>\n      <section className=\"primary d-block d-md-none\">\n        <Header />\n        <Container className=\"container-mobile\">{form}</Container>\n        <div className=\"divider\" />\n        <Container className=\"container-mobile\">{touts}</Container>\n      </section>\n      <Footer mobileOnly />\n    </main>\n  );\n}\n","import React, { useState, useEffect, useRef } from 'react';\nimport { get, some, values, sortBy, orderBy, isEmpty, round } from 'lodash';\nimport { Howl } from 'howler';\nimport { AiOutlineDisconnect } from 'react-icons/ai';\nimport { Container } from 'react-bootstrap';\nimport Header from '../components/Header';\n\nexport default function Table(game) {\n  const [loaded, setLoaded] = useState(false);\n  const [buzzed, setBuzzer] = useState(\n    some(game.G.queue, (o) => o.id === game.playerID)\n  );\n  const [lastBuzz, setLastBuzz] = useState(null);\n  const [sound, setSound] = useState(false);\n  const [soundPlayed, setSoundPlayed] = useState(false);\n  const buzzButton = useRef(null);\n  const queueRef = useRef(null);\n\n  const buzzSound = new Howl({\n    src: [\n      `${process.env.PUBLIC_URL}/shortBuzz.webm`,\n      `${process.env.PUBLIC_URL}/shortBuzz.mp3`,\n    ],\n    volume: 0.5,\n    rate: 1.5,\n  });\n\n  const playSound = () => {\n    if (sound && !soundPlayed) {\n      buzzSound.play();\n      setSoundPlayed(true);\n    }\n  };\n\n  useEffect(() => {\n    console.log(game.G.queue, Date.now());\n    // reset buzzer based on game\n    if (!game.G.queue[game.playerID]) {\n      // delay the reset, in case game state hasn't reflected your buzz yet\n      if (lastBuzz && Date.now() - lastBuzz < 500) {\n        setTimeout(() => {\n          const queue = queueRef.current;\n          if (queue && !queue[game.playerID]) {\n            setBuzzer(false);\n          }\n        }, 500);\n      } else {\n        // immediate reset, if it's been awhile\n        setBuzzer(false);\n      }\n    }\n\n    // reset ability to play sound if there is no pending buzzer\n    if (isEmpty(game.G.queue)) {\n      setSoundPlayed(false);\n    } else if (loaded) {\n      playSound();\n    }\n\n    if (!loaded) {\n      setLoaded(true);\n    }\n\n    queueRef.current = game.G.queue;\n  }, [game.G.queue]);\n\n  const attemptBuzz = () => {\n    if (!buzzed) {\n      playSound();\n      game.moves.buzz(game.playerID);\n      setBuzzer(true);\n      setLastBuzz(Date.now());\n    }\n  };\n\n  // spacebar will buzz\n  useEffect(() => {\n    function onKeydown(e) {\n      if (e.keyCode === 32 && !e.repeat) {\n        buzzButton.current.click();\n        e.preventDefault();\n      }\n    }\n    window.addEventListener('keydown', onKeydown);\n    return () => window.removeEventListener('keydown', onKeydown);\n  }, []);\n\n  const players = !game.gameMetadata\n    ? []\n    : game.gameMetadata\n        .filter((p) => p.name)\n        .map((p) => ({ ...p, id: String(p.id) }));\n  // host is lowest active user\n  const firstPlayer =\n    get(\n      sortBy(players, (p) => parseInt(p.id, 10)).filter((p) => p.connected),\n      '0'\n    ) || null;\n  const isHost = get(firstPlayer, 'id') === game.playerID;\n\n  const queue = sortBy(values(game.G.queue), ['timestamp']);\n  const buzzedPlayers = queue\n    .map((p) => {\n      const player = players.find((player) => player.id === p.id);\n      if (!player) {\n        return {};\n      }\n      return {\n        ...p,\n        name: player.name,\n        connected: player.connected,\n      };\n    })\n    .filter((p) => p.name);\n  // active players who haven't buzzed\n  const activePlayers = orderBy(\n    players.filter((p) => !some(queue, (q) => q.id === p.id)),\n    ['connected', 'name'],\n    ['desc', 'asc']\n  );\n\n  const timeDisplay = (delta) => {\n    if (delta > 1000) {\n      return `+${round(delta / 1000, 2)} s`;\n    }\n    return `+${delta} ms`;\n  };\n\n  return (\n    <div>\n      <Header\n        auth={game.headerData}\n        clearAuth={() =>\n          game.headerData.setAuth({\n            playerID: null,\n            credentials: null,\n            roomID: null,\n          })\n        }\n        sound={sound}\n        setSound={() => setSound(!sound)}\n      />\n      <Container>\n        <section>\n          <p id=\"room-title\">Room {game.gameID}</p>\n          {!game.isConnected ? (\n            <p className=\"warning\">Disconnected - attempting to reconnect...</p>\n          ) : null}\n          <div id=\"buzzer\">\n            <button\n              ref={buzzButton}\n              disabled={buzzed || game.G.locked}\n              onClick={() => {\n                if (!buzzed && !game.G.locked) {\n                  attemptBuzz();\n                }\n              }}\n            >\n              {game.G.locked ? 'Locked' : buzzed ? 'Buzzed' : 'Buzz'}\n            </button>\n          </div>\n          {isHost ? (\n            <div className=\"settings\">\n              <div className=\"button-container\">\n                <button\n                  className=\"text-button\"\n                  onClick={() => game.moves.toggleLock()}\n                >\n                  {game.G.locked ? 'Unlock buzzers' : 'Lock buzzers'}\n                </button>\n              </div>\n              <div className=\"button-container\">\n                <button\n                  disabled={isEmpty(game.G.queue)}\n                  onClick={() => game.moves.resetBuzzers()}\n                >\n                  Reset all buzzers\n                </button>\n              </div>\n              <div className=\"divider\" />\n            </div>\n          ) : null}\n        </section>\n        <div className=\"queue\">\n          <p>Players Buzzed</p>\n          <ul>\n            {buzzedPlayers.map(({ id, name, timestamp, connected }, i) => (\n              <li key={id} className={isHost ? 'resettable' : null}>\n                <div\n                  className=\"player-sign\"\n                  onClick={() => {\n                    if (isHost) {\n                      game.moves.resetBuzzer(id);\n                    }\n                  }}\n                >\n                  <div className={`name ${!connected ? 'dim' : ''}`}>\n                    {name}\n                    {!connected ? (\n                      <AiOutlineDisconnect className=\"disconnected\" />\n                    ) : (\n                      ''\n                    )}\n                  </div>\n                  {i > 0 ? (\n                    <div className=\"mini\">\n                      {timeDisplay(timestamp - queue[0].timestamp)}\n                    </div>\n                  ) : null}\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n        <div className=\"queue\">\n          <p>Other Players</p>\n          <ul>\n            {activePlayers.map(({ id, name, connected }) => (\n              <li key={id}>\n                <div className={`name ${!connected ? 'dim' : ''}`}>\n                  {name}\n                  {!connected ? (\n                    <AiOutlineDisconnect className=\"disconnected\" />\n                  ) : (\n                    ''\n                  )}\n                </div>\n              </li>\n            ))}\n          </ul>\n        </div>\n      </Container>\n    </div>\n  );\n}\n","import React from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Spinner } from 'react-bootstrap';\nimport { Client } from 'boardgame.io/react';\nimport { SocketIO } from 'boardgame.io/multiplayer';\nimport { Buzzer } from '../lib/store';\nimport { GAME_SERVER } from '../lib/endpoints';\nimport Table from '../components/Table';\nimport Header from '../components/Header';\n\nexport default function Game({ auth, setAuth }) {\n  const { id: roomID } = useParams();\n\n  const loadingComponent = () => (\n    <div>\n      <Header\n        auth={auth}\n        clearAuth={() =>\n          setAuth({\n            playerID: null,\n            credentials: null,\n            roomID: null,\n          })\n        }\n      />\n      <Container className=\"container-loading\">\n        <Spinner animation=\"border\" role=\"status\">\n          <span className=\"sr-only\">Loading...</span>\n        </Spinner>\n      </Container>\n    </div>\n  );\n\n  const App = Client({\n    game: Buzzer,\n    board: Table,\n    multiplayer: SocketIO({ server: GAME_SERVER }),\n    debug: false,\n    loading: loadingComponent,\n  });\n\n  return (\n    <main id=\"game\">\n      <div className=\"primary\">\n        <App\n          gameID={roomID}\n          playerID={String(auth.playerID)}\n          credentials={auth.credentials}\n          headerData={{ ...auth, setAuth }}\n        />\n      </div>\n    </main>\n  );\n}\n","import React, { useState } from 'react';\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route,\n  Redirect,\n} from 'react-router-dom';\nimport { get, isNil } from 'lodash';\n\nimport Lobby from './containers/Lobby';\nimport Game from './containers/Game';\nimport './App.css';\n\nfunction App() {\n  const [auth, setAuth] = useState({\n    playerID: null,\n    credentials: null,\n    roomID: null,\n  });\n\n  return (\n    <div className=\"App\">\n      <Router>\n        <Switch>\n          <Route\n            path=\"/:id\"\n            render={({ location, match }) => {\n              const roomID = get(match, 'params.id');\n              // redirect if the roomID in auth doesn't match, or no credentials\n              return roomID &&\n                auth.roomID === roomID &&\n                !isNil(auth.credentials) &&\n                !isNil(auth.playerID) ? (\n                <Game auth={auth} setAuth={setAuth} />\n              ) : (\n                <Redirect\n                  to={{\n                    pathname: '/',\n                    state: { from: location, roomID },\n                  }}\n                />\n              );\n            }}\n          />\n          <Route path=\"/\">\n            <Lobby setAuth={setAuth} />\n          </Route>\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}